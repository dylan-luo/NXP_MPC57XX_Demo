=============================================================================
List of generated methods in project: mpc5746r_sdk_demo_Z4_1

This text description is generated by Processor Expert. Do not modify it.
=============================================================================

Module "pin_mux"   (component PinSettings)
   - pin_mux_PINS_DRV_Init -This function configures the pins with the options provided in the provided structure
   - pin_mux_PINS_DRV_SetPullSel -This function configures the internal resistor
   - pin_mux_PINS_DRV_SetSpecificPullSel -This function configures the internal specific pull resistor for GPI pins.
   - pin_mux_PINS_DRV_SetOutputDriveControl -This function configures the output drive control
   - pin_mux_PINS_DRV_SetInputBuffer -This function configures the input buffer
   - pin_mux_PINS_DRV_ConfigIntFilterClock -This function configures the interrupt filter clock prescaler
   - pin_mux_PINS_DRV_SetExInt -This function configures the external interrupt
   - pin_mux_PINS_DRV_ClearPinExIntFlag -This function clears the individual pin external interrupt status flag
   - pin_mux_PINS_DRV_GetPinExIntFlag -This function gets the individual pin external interrupt status flag
   - pin_mux_PINS_DRV_ClearExIntFlag -This function clears the entire external interrupt status flag
   - pin_mux_PINS_DRV_GetExIntFlag -This function gets the individual pin external interrupt status flag
   - pin_mux_PINS_DRV_WritePin -This function writes the given pin from a port, with the given value ('0' represents LOW, '1' 
                represents HIGH)
   - pin_mux_PINS_DRV_WritePins -This function writes all pins configured as output with the values given in the parameter pins.
                '0' represents LOW, '1' represents HIGH
   - pin_mux_PINS_DRV_GetPinsOutput -This function returns the current output that is written to a port. Only pins that are 
                configured as output will have meaningful values
   - pin_mux_PINS_DRV_SetPins -This function configures output pins listed in parameter pins (bits that are '1') to have a 
                value of 'set' (HIGH). Pins corresponding to '0' will be unaffected
   - pin_mux_PINS_DRV_ClearPins -This function configures output pins listed in parameter pins (bits that are '1') to have a 
                'cleared' value (LOW). Pins corresponding to '0' will be unaffected
   - pin_mux_PINS_DRV_TogglePins -This function toggles output pins listed in parameter pins (bits that are '1'). Pins 
                corresponding to '0' will be unaffected
   - pin_mux_PINS_DRV_ReadPins -This function returns the current input values from a port. Only pins configured as input will 
                have meaningful values

Module "clockMan1" (component clock_manager)
   - clockMan1_CLOCK_DRV_Init -Initialize clocking modules
   - clockMan1_CLOCK_DRV_GetFreq -Return frequency.

Module "intMan1"   (component interrupt_manager)
   - intMan1_INT_SYS_InstallHandler -Installs an interrupt handler routine for a given IRQ number.
   - intMan1_INT_SYS_EnableIRQ -Enables an interrupt for a given IRQ number.
   - intMan1_INT_SYS_DisableIRQ -Disables an interrupt for a given IRQ number.
   - intMan1_INT_SYS_EnableIRQGlobal -Enables system interrupt.
   - intMan1_INT_SYS_DisableIRQGlobal -Disable system interrupt.
   - intMan1_INT_SYS_SetPriority -Set Interrupt Priority.
   - intMan1_INT_SYS_GetPriority -Get Interrupt Priority.
   - intMan1_INT_SYS_SetSoftwareIRQRequest -Set software interrupt request.
   - intMan1_INT_SYS_ClearSoftwareIRQRequest -Clear software interrupt request.
   - intMan1_INT_SYS_EnableIRQ_MC -Enables an interrupt for a given IRQ number, on the given cores.
   - intMan1_INT_SYS_GetCoresForIRQ -Gets the cores on which an interrupt for the specified IRQ number is enabled.
   - intMan1_INT_SYS_DisableIRQ_MC -Disables an interrupt for a given IRQ number, on the given cores.
   - intMan1_INT_SYS_DisableIRQ_MC_All -Disables an interrupt for a given IRQ number, on all cores.

Module "linflexd_uart1" (component linflexd_uart)
   - linflexd_uart1_LINFLEXD_UART_DRV_SetBaudRate -Sets the baudrate for UART communication.
   - linflexd_uart1_LINFLEXD_UART_DRV_GetBaudRate -Retrieves the baudrate of UART communication.
   - linflexd_uart1_LINFLEXD_UART_DRV_Init -Initializes an UART operation instance.
   - linflexd_uart1_LINFLEXD_UART_DRV_Deinit -Shuts down the UART by disabling interrupts and transmitter/receiver.
   - linflexd_uart1_LINFLEXD_UART_DRV_InstallRxCallback -Installs callback function for the UART receive.
   - linflexd_uart1_LINFLEXD_UART_DRV_InstallTxCallback -Installs callback function for the UART transmit.
   - linflexd_uart1_LINFLEXD_UART_DRV_InstallErrorCallback -Installs callback function for the UART error cases.
   - linflexd_uart1_LINFLEXD_UART_DRV_SendDataBlocking -Sends data out through the UART module using a blocking method.
   - linflexd_uart1_LINFLEXD_UART_DRV_SendData -Sends data out through the UART module using a non-blocking method. This 
                enables an a-sync method for transmitting data. When used with a non-blocking receive, the UART can perform a 
                full duplex operation. Non-blocking means that the function returns immediately. The application has to get the 
                transmit status to know when the transmit is complete.
   - linflexd_uart1_LINFLEXD_UART_DRV_GetTransmitStatus -Returns whether the previous transmit is complete.
   - linflexd_uart1_LINFLEXD_UART_DRV_AbortSendingData -Terminates a non-blocking transmission early.
   - linflexd_uart1_LINFLEXD_UART_DRV_ReceiveDataBlocking -Gets data from the UART module by using a blocking method. Blocking 
                means that the function does not return until the receive is complete.
   - linflexd_uart1_LINFLEXD_UART_DRV_ReceiveData -Gets data from the UART module by using a non-blocking method. This enables 
                an a-sync method for receiving data. When used with a non-blocking transmission, the UART can perform a full 
                duplex operation. Non-blocking means that the function returns immediately. The application has to get the 
                receive status to know when the receive is complete.
   - linflexd_uart1_LINFLEXD_UART_DRV_GetReceiveStatus -Returns whether the previous receive is complete.
   - linflexd_uart1_LINFLEXD_UART_DRV_AbortReceivingData -Terminates a non-blocking receive early.
   - linflexd_uart1_LINFLEXD_UART_DRV_SetTxBuffer -Updates the internal reference to the tx buffer.
   - linflexd_uart1_LINFLEXD_UART_DRV_SetRxBuffer -Updates the internal reference to rx buffer.

Module "dmaController1" (component edma)
   - dmaController1_EDMA_DRV_Init -Initializes the eDMA module.
   - dmaController1_EDMA_DRV_Deinit -Shuts down the eDMA module.
   - dmaController1_EDMA_DRV_ChannelInit -Initializes a eDMA virtualChannel.
   - dmaController1_EDMA_DRV_ReleaseChannel -Releases an eDMA virtualChannel.
   - dmaController1_EDMA_DRV_StartChannel -Starts an eDMA virtualChannel.
   - dmaController1_EDMA_DRV_StopChannel -Stops the eDMA virtualChannel.
   - dmaController1_EDMA_DRV_InstallCallback -Registers the callback function and the parameter for eDMA virtualChannel.
   - dmaController1_EDMA_DRV_GetChannelStatus -Gets the eDMA virtualChannel status.
   - dmaController1_EDMA_DRV_PushConfigToReg -Copies the virtualChannel configuration to the TCD registers.
   - dmaController1_EDMA_DRV_PushConfigToSTCD -Copies the virtualChannel configuration to the software TCD structure.
   - dmaController1_EDMA_DRV_ConfigSingleBlockTransfer -Configures a simple single block data transfer with DMA. This function 
                configures the descriptor for a single block transfer.
   - dmaController1_EDMA_DRV_ConfigLoopTransfer -Configures the DMA transfer in loop mode.
   - dmaController1_EDMA_DRV_ConfigScatterGatherTransfer -Configures the DMA transfer in a scatter-gather mode.
   - dmaController1_EDMA_DRV_ConfigMultiBlockTransfer -Configures a multiple block data transfer with DMA. This function 
                configures the descriptor for a multi block transfer.
   - dmaController1_EDMA_DRV_CancelTransfer -Cancels the remaining data transfer.
   - dmaController1_EDMA_DRV_SetChannelRequestAndTrigger -Configures the DMA request and periodic trigger for the eDMA channel.
   - dmaController1_EDMA_DRV_ClearTCD -Clears all registers to 0 for the virtualChannel's TCD.
   - dmaController1_EDMA_DRV_SetSrcAddr -Configures the source address for the eDMA virtualChannel.
   - dmaController1_EDMA_DRV_SetSrcOffset -Configures the source address signed offset for the eDMA virtualChannel.
   - dmaController1_EDMA_DRV_SetSrcReadChunkSize -Configures the source data chunk size (transferred in a read sequence).
   - dmaController1_EDMA_DRV_SetDestAddr -Configures the destination address for the eDMA virtualChannel.
   - dmaController1_EDMA_DRV_SetDestOffset -Configures the destination address signed offset for the eDMA virtualChannel.
   - dmaController1_EDMA_DRV_SetDestWriteChunkSize -Configures the destination data chunk size (transferred in a write sequence)
                .
   - dmaController1_EDMA_DRV_SetMinorLoopBlockSize -Configures the number of bytes to be transferred in each service request of 
                the virtualChannel.
   - dmaController1_EDMA_DRV_SetMajorLoopIterationCount -Configures the number of major loop iterations.
   - dmaController1_EDMA_DRV_GetRemainingMajorIterationsCount -Returns the remaining major loop iteration count.
   - dmaController1_EDMA_DRV_SetScatterGatherLink -Configures the memory address of the next TCD, in scatter/gather mode.
   - dmaController1_EDMA_DRV_DisableRequestsOnTransferComplete -Disables/Enables the DMA request after the major loop completes 
                for the TCD.
   - dmaController1_EDMA_DRV_SetSrcLastAddrAdjustment -Configures the source address last adjustment.
   - dmaController1_EDMA_DRV_SetDestLastAddrAdjustment -Configures the destination address last adjustment.
   - dmaController1_EDMA_DRV_ConfigureInterrupt -Disables/Enables the virtualChannel interrupt requests.
   - dmaController1_EDMA_DRV_TriggerSwRequest -Triggers a sw request for the current virtualChannel.

Module "osif1"     (component osif)
   - osif1_OSIF_TimeDelay -Delays execution for a number of milliseconds.
   - osif1_OSIF_MutexLock -Waits for a mutex and locks it.
   - osif1_OSIF_MutexUnlock -Unlocks a previously locked mutex.
   - osif1_OSIF_MutexCreate -Create an unlocked mutex.
   - osif1_OSIF_MutexDestroy -Destroys a previously created mutex.
   - osif1_OSIF_SemaWait -Decrement a semaphore with timeout.
   - osif1_OSIF_SemaPost -Increment a semaphore.
   - osif1_OSIF_SemaCreate -Creates a semaphore with a given value.
   - osif1_OSIF_SemaDestroy -Destroys a previously created semaphore.
   - osif1_OSIF_GetMilliseconds -Returns the number of miliseconds elapsed since starting the internal timer or starting the 
                scheduler.

Module "pit1"      (component pit)
   - pit1_PIT_DRV_GetDefaultConfig -Gets default PIT module configuration structure
   - pit1_PIT_DRV_GetDefaultChanConfig -Gets default timer channel configuration structure
   - pit1_PIT_DRV_Init -Initializes the PIT module.
   - pit1_PIT_DRV_Deinit -De-initializes PIT module.
   - pit1_PIT_DRV_InitChannel -Initializes the PIT channel.
   - pit1_PIT_DRV_ConfigChannel -Sets the timer channel period in microseconds or count base on period unit argument
   - pit1_PIT_DRV_StartChannel -Starts the timer channel counting.
   - pit1_PIT_DRV_StopChannel -Stops the timer channel counting.
   - pit1_PIT_DRV_SetTimerPeriodByUs -Sets the timer channel period in microseconds.
   - pit1_PIT_DRV_GetCurrentTimerUs -Gets the current timer channel counting value in microseconds.
   - pit1_PIT_DRV_SetTimerPeriodByCount -Sets the timer channel period in count unit.
   - pit1_PIT_DRV_GetCurrentTimerCount -Gets the current timer channel counting value in count.
   - pit1_PIT_DRV_SetLifetimeTimerCount -Build the 64-bit lifetimer
   - pit1_PIT_DRV_GetLifetimeTimerCount -Reads the current lifetime counter value
   - pit1_PIT_DRV_GetLifetimeTimerUs -Reads the current lifetime value in microseconds.
   - pit1_PIT_DRV_EnableChannelInterrupt -Enable interrupt generation of timer channel when timeout occurs
   - pit1_PIT_DRV_DisableChannelInterrupt -Disable interrupt generation of timer channel when timeout occurs
   - pit1_PIT_DRV_GetStatusFlags -Gets the current interrupt flag of timer channel.
   - pit1_PIT_DRV_ClearStatusFlags -Clears the interrupt flag of timer channel.

Module "canCom1"   (component flexcan)
   - canCom1_FLEXCAN_DRV_SetBitrate -Sets the FlexCAN bit rate.
   - canCom1_FLEXCAN_DRV_GetBitrate -Gets the FlexCAN bit rate.
   - canCom1_FLEXCAN_DRV_SetRxMaskType -Sets the RX masking type.
   - canCom1_FLEXCAN_DRV_SetRxFifoGlobalMask -Sets the FlexCAN RX FIFO global standard or extended mask.
   - canCom1_FLEXCAN_DRV_SetRxMbGlobalMask -Sets the FlexCAN RX MB global standard or extended mask.
   - canCom1_FLEXCAN_DRV_SetRxIndividualMask -Sets the FlexCAN RX individual standard or extended mask.
   - canCom1_FLEXCAN_DRV_Init -Initializes the FlexCAN peripheral.
   - canCom1_FLEXCAN_DRV_Deinit -Shuts down a FlexCAN instance.
   - canCom1_FLEXCAN_DRV_ConfigTxMb -FlexCAN transmit message buffer field configuration.
   - canCom1_FLEXCAN_DRV_ConfigRemoteResponseMb -Configures a transmit message buffer for remote frame response.
   - canCom1_FLEXCAN_DRV_SendBlocking -Sends a CAN frame using the specified message buffer, in a blocking manner.
   - canCom1_FLEXCAN_DRV_Send -Sends a CAN frame using the specified message buffer.
   - canCom1_FLEXCAN_DRV_AbortTransfer -Ends a non-blocking FlexCAN transfer early.
   - canCom1_FLEXCAN_DRV_ConfigRxMb -FlexCAN receive message buffer field configuration.
   - canCom1_FLEXCAN_DRV_ConfigRxFifo -FlexCAN RX FIFO field configuration.
   - canCom1_FLEXCAN_DRV_ReceiveBlocking -Receives a CAN frame using the specified message buffer, in a blocking manner.
   - canCom1_FLEXCAN_DRV_Receive -Receives a CAN frame using the specified message buffer.
   - canCom1_FLEXCAN_DRV_RxFifoBlocking -Receives a CAN frame using the message FIFO, in a blocking manner.
   - canCom1_FLEXCAN_DRV_RxFifo -Receives a CAN frame using the message FIFO.
   - canCom1_FLEXCAN_DRV_GetTransferStatus -Returns whether the previous FLEXCAN transfer has finished.
   - canCom1_FLEXCAN_DRV_InstallErrorCallback -Installs a callback function for the Error IRQ handler.
   - canCom1_FLEXCAN_DRV_InstallEventCallback -Installs a callback function for the IRQ handler.
   - canCom1_FLEXCAN_DRV_GetDefaultConfig -Initializes the FlexCAN peripheral.
   - canCom1_FLEXCAN_DRV_SetRxMb14Mask -Sets the FlexCAN Rx MB 14 mask (standard or extended).
   - canCom1_FLEXCAN_DRV_SetRxMb15Mask -Sets the FlexCAN Rx MB 15 mask (standard or extended).
   - canCom1_FLEXCAN_DRV_GetErrorStatus -Reports the error status for CAN instance

Module "dspi0"     (component dspi)
   - dspi0_DSPI_MasterSetDelay -Configures the DSPI master mode bus timing delay options.
   - dspi0_DSPI_GetDefaultMasterCfg -This function returns a default configuration for DSPI module in SPI master mode.
   - dspi0_DSPI_MasterInit -Initializes a DSPI instance for master mode operation.
   - dspi0_DSPI_MasterTransfer -Performs an non-blocking SPI master mode transfer.
   - dspi0_DSPI_MasterTransferBlocking -Performs an blocking SPI master mode transfer.
   - dspi0_DSPI_AbortTransfer -Terminates an asynchronous transfer early.
   - dspi0_DSPI_UpdateCS -Change the chip select used by DSPI driver.
   - dspi0_DSPI_GetDefaultSlaveCfg -This function returns a default configuration for DSPI module in SPI slave mode.
   - dspi0_DSPI_SlaveInit -Initializes a DSPI instance for slave mode operation.
   - dspi0_DSPI_SlaveTransfer -Performs an non-blocking SPI slave mode transfer.
   - dspi0_DSPI_SlaveTransferBlocking -Performs an blocking SPI slave mode transfer.
   - dspi0_DSPI_Deinit -Shuts down a DSPI instance.
   - dspi0_DSPI_GetTransferStatus -Get the current transfer status.

Module "dspi1"     (component dspi)
   - dspi1_DSPI_MasterSetDelay -Configures the DSPI master mode bus timing delay options.
   - dspi1_DSPI_GetDefaultMasterCfg -This function returns a default configuration for DSPI module in SPI master mode.
   - dspi1_DSPI_MasterInit -Initializes a DSPI instance for master mode operation.
   - dspi1_DSPI_MasterTransfer -Performs an non-blocking SPI master mode transfer.
   - dspi1_DSPI_MasterTransferBlocking -Performs an blocking SPI master mode transfer.
   - dspi1_DSPI_AbortTransfer -Terminates an asynchronous transfer early.
   - dspi1_DSPI_UpdateCS -Change the chip select used by DSPI driver.
   - dspi1_DSPI_GetDefaultSlaveCfg -This function returns a default configuration for DSPI module in SPI slave mode.
   - dspi1_DSPI_SlaveInit -Initializes a DSPI instance for slave mode operation.
   - dspi1_DSPI_SlaveTransfer -Performs an non-blocking SPI slave mode transfer.
   - dspi1_DSPI_SlaveTransferBlocking -Performs an blocking SPI slave mode transfer.
   - dspi1_DSPI_Deinit -Shuts down a DSPI instance.
   - dspi1_DSPI_GetTransferStatus -Get the current transfer status.

Module "flash_c551" (component flash_c55)
   - flash_c551_FLASH_DRV_Init -Initializes the FLASH module.
   - flash_c551_FLASH_DRV_SetLock -Set the block is locked or unlocked state.
   - flash_c551_FLASH_DRV_GetLock -Get the block locking status.
   - flash_c551_FLASH_DRV_Erase -Erase the selected block in the flash memory.
   - flash_c551_FLASH_DRV_BlankCheck -Check the previous erase operation.
   - flash_c551_FLASH_DRV_Program -Program operation in C55 flash.
   - flash_c551_FLASH_DRV_ProgramVerify -Verify the previous program operation.
   - flash_c551_FLASH_DRV_CheckSum -Perform a sum of data integrity in the flash memory range.
   - flash_c551_FLASH_DRV_Suspend -Suspend a operation is being in progress.
   - flash_c551_FLASH_DRV_Resume -Resume the previous suspend operation.
   - flash_c551_FLASH_DRV_Abort -Abort a program or erase operation.
   - flash_c551_FLASH_DRV_GetOverPgmProtStatus -Get the over-program protection status.
   - flash_c551_FLASH_DRV_GetFailedAddress -Get the failing address in memory.
   - flash_c551_FLASH_DRV_ArrayIntegrityCheck -Check the array integrity of the flash memory.
   - flash_c551_FLASH_DRV_ArrayIntegritySuspend -Suspend an on-going array integrity check.
   - flash_c551_FLASH_DRV_ArrayIntegrityResume -Resume the previous suspend operation.
   - flash_c551_FLASH_DRV_UserMarginReadCheck -Check the user margin read of the flash memory.
   - flash_c551_FLASH_DRV_CheckProgramStatus -Check the program operation.
   - flash_c551_FLASH_DRV_CheckEraseStatus -Check the erase operation.
   - flash_c551_FLASH_DRV_CheckUserTestStatus -Check the operation in user test mode.
   - flash_c551_FLASH_DRV_EnableCmdCompleteInterupt -Allow to enable the command complete interrupt is generated when a program 
                erase complete or suspend program, erase.
   - flash_c551_FLASH_DRV_DisableCmdCompleteInterupt -Disable the command program, erase, suspend complete interrupt.

Module "eee1"      (component eee)
   - eee1_EEE_DRV_InitEeprom -Initializes the EEE module.
   - eee1_EEE_DRV_WriteEeprom -Write data records into EEPROM emulation.
   - eee1_EEE_DRV_ReadEeprom -Read the requested ID from EEPROM emulation.
   - eee1_EEE_DRV_DeleteRecord -Delete a data record from EEPROM emulation
   - eee1_EEE_DRV_ReportEepromStatus -Report the EEPROM status.
   - eee1_EEE_DRV_RemoveEeprom -Remove the EEPROM emulation.
   - eee1_EEE_DRV_MainFunction -The main function to help completion in swap progress.

Module "swt1"      (component swt)
   - swt1_SWT_DRV_LockConfig -Lock SWT registers. This function locks the SWT register. When locked, the SWT_CR, SWT_TO, SWT_WN 
                and SWT_SK registers are read-only.
   - swt1_SWT_DRV_Init -Initializes the SWT instance. This function initializes the SWT instance by user configuration. Ensure 
                that the SIRC clock gate is enabled.
   - swt1_SWT_DRV_GetDefaultConfig -Gets the default configuration of the SWT. This function gets the default configuration of 
                the SWT.
   - swt1_SWT_DRV_Deinit -De-initializes the SWT instance. This function resets all configuration to default and disable the 
                SWT instance.
   - swt1_SWT_DRV_SetServiceConfig -Sets service mode. This function sets service mode and sets initial service key if in Keyed 
                Service Mode. This function will unlock the SWT configuration.
   - swt1_SWT_DRV_Service -Services the SWT. This function resets the SWT counter in fixed service sequence and keyed service 
                sequence modes.    - Fixed Service Sequence Mode: write fixed keys.    - Keyed Service Sequence Mode: write 
                pseudo random keys (17*SK+3) mod 2^16.
   - swt1_SWT_DRV_SetIntConfig -Sets timeout interrupt. This function enables/disables the SWT timeout interrupt. This function 
                will unlock the SWT configuration.
   - swt1_SWT_DRV_ClearIntFlag -Clears the Timeout Interrupt Flag. This function clears the Timeout Interrupt Flag.
   - swt1_SWT_DRV_GetIntStatus -Gets the Timeout Interrupt Status. This function gets the Timeout Interrupt Status.
   - swt1_SWT_DRV_SetTimeoutValue -Sets timeout value. This function sets timeout value. This function will unlock the SWT 
                configuration.
   - swt1_SWT_DRV_SetWindowConfig -Sets window mode. This function enables/disables window mode and sets window value if 
                enabled.
   - swt1_SWT_DRV_GetCounterValue -Gets the value of the SWT counter. This function gets the value of the SWT counter. When the 
                watchdog is disabled (SWT_CR[WEN] is 0), this field shows the value of the internal down counter. When the 
                watchdog is enabled (SWT_CR[WEN] is 1), this field is cleared (the value is 0x0000_0000). Values in this field 
                can lag behind the internal counter value for up to 6 system clock cycles plus 8 counter clock cycles. 
                Therefore, the value read from this field immediately after disabling the watchdog may be higher than the 
                actual value of the internal counter. The SWT timer should be stopped before calling this function.
   - swt1_SWT_DRV_StartTimer -Enables the SWT timer. This function enables the SWT timer. This function will unlock the SWT 
                configuration.
   - swt1_SWT_DRV_StopTimer -Disables the SWT timer. This function disables the SWT timer. This function will unlock the SWT 
                configuration.

Module "Cpu"       (component MPC5746R_252)
   - Cpu_SystemInit -This method configures the oscillator (PLL) that is part of the microcontroller device. SystemInit is 
                called from startup_device file.
   - Cpu_SystemCoreClockUpdate -SystemCoreClockUpdate evaluates the clock register settings and calculates the current core 
                clock.
   - Cpu_SystemSoftwareReset -This method initiates a software rest of the microcontroller.

===================================================================================
